import pu.pi.ParIteratorFactory;

import java.util.concurrent.ExecutionException;
import java.util.concurrent.atomic.AtomicInteger;

import pt.runtime.CurrentTask;
import pt.runtime.TaskID;

import java.util.*;

public class ParaTaskExampleArraysParallelised {
	final int NUM_OF_ARRAYS = 10;
	// AtomicInteger working=new AtomicInteger(0);
	ArrayList<int[]> intArrays = new ArrayList<int[]>();
	
	double range = 4294967296.0;
	int min = -2147483648;


	private int[] numbers;
	private int[] helper;
	private int number;

	public void sort(int[] values) {
		this.numbers = values;
		number = values.length;
		this.helper = new int[number];
		mergesort(0, number - 1);
	}

	private void mergesort(int low, int high) {
		if (low < high) {
			int middle = low + (high - low) / 2;
			mergesort(low, middle);
			mergesort(middle + 1, high);
			merge(low, middle, high);
		}
	}

	private void merge(int low, int middle, int high) {

		for (int i = low; i <= high; i++) {
			helper[i] = numbers[i];
		}

		int i = low;
		int j = middle + 1;
		int k = low;
		while (i <= middle && j <= high) {
			if (helper[i] <= helper[j]) {
				numbers[k] = helper[i];
				i++;
			} else {
				numbers[k] = helper[j];
				j++;
			}
			k++;
		}
		while (i <= middle) {
			numbers[k] = helper[i];
			k++;
			i++;
		}

	}

	TASK(NUM_OF_ARRAYS)	public void paraArray() {
		// int range is 2,147,483,647 - -2,147,483,648 +1
		
		// changing int array size to 40000000 takes 36 seconds
		int[] array = new int[4000000];
		for (int j = 0; j < array.length; j++) {
			array[j] = (int) (Math.random() * range) + min;
		}
		intArrays.add(array);
		System.out.println("Created array " + CurrentTask.relativeID());

	}

	TASK(NUM_OF_ARRAYS)	public void paraTask(Iterator<int[]> it) {
		System.out.println("I am task number " + CurrentTask.relativeID() + ", being sorted by thread number: "
				+ CurrentTask.currentThreadID());
		while (it.hasNext()) {
			sort(it.next());

		}
	}

	private void start() {

		System.out.println("Initializing arrays..");
		TaskID<Void> arrayTasks = paraArray();
		try {
			arrayTasks.waitTillFinished();
		} catch (ExecutionException e) {
			e.printStackTrace();
		} catch (InterruptedException e) {
			e.printStackTrace();
		}

		Iterator<int[]> parIterator = ParIteratorFactory.createParIterator(intArrays, 4);

		System.out.println("There are " + intArrays.size() + " arrays to be sorted. Timer started.");

		long startTime = System.currentTimeMillis();
		TaskID<Void> id = paraTask(parIterator);
		try {
			id.waitTillFinished();
		} catch (ExecutionException e) {
			e.printStackTrace();
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
		long endTime = System.currentTimeMillis();
		System.out.println("Operation took: " + (endTime - startTime) / 1000.0 + " seconds");
	}

	public static void main(String[] args) {
		ParaTaskExampleArraysParallelised program = new ParaTaskExampleArraysParallelised();
		program.start();
	}
}