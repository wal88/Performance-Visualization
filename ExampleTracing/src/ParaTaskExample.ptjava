import pu.pi.ParIteratorFactory;

import java.util.concurrent.ExecutionException;
import java.util.concurrent.atomic.AtomicInteger;

import pt.runtime.CurrentTask;
import pt.runtime.TaskID;

import java.util.*;
import utils.MergeSort;

public class ParaTaskExample {
	final int NUM_OF_ARRAYS = 8;
	final int LENGTH_OF_ARRAY = 4000000;
	private int[] numbers;
    private int[] helper;
    private int number;
	
    MergeSort ms = new MergeSort(numbers, helper, number);
    private ArrayList<int[]> createArrays(int numbersOfArray, int lengthOfArray) {
    	ArrayList<int[]> intArrays = new ArrayList<int[]>();
    	System.out.println("Initializing arrays..");
    	// int range is 2,147,483,647 - -2,147,483,648 +1
    	double range = 4294967296.0;
    	int min = -2147483648;
    			for (int i = 0; i< numbersOfArray; i++) {
        	int[] array = new int[lengthOfArray];
			for (int j=0; j< array.length; j++) {
				array[j] = (int) ( Math.random() * range) + min;
			}
		intArrays.add(array);
		System.out.println("Created array " + i);
		}
		return intArrays;
    }
    
    
    TASK(NUM_OF_ARRAYS) public void paraTask(Iterator<int[]> it) {
		System.out.println("I am task number " + CurrentTask.relativeID() + ", being sorted by thread number: " + CurrentTask.currentThreadID());
    	while (it.hasNext()) {
			ms.sort(it.next());
			
		}
	}
    
    private void start() {
    	
		ArrayList<int[]> intArrays= createArrays(NUM_OF_ARRAYS,LENGTH_OF_ARRAY);
		Iterator<int[]> parIterator = ParIteratorFactory.createParIterator(intArrays, NUM_OF_ARRAYS);
		
		System.out.println("There are " + intArrays.size() + " arrays to be sorted. Timer started.");
		
		long startTime = System.currentTimeMillis();
		TaskID<Void> id = paraTask(parIterator);
		try {
			id.waitTillFinished();
		} catch (ExecutionException e) {
			e.printStackTrace();
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
		long endTime = System.currentTimeMillis();
		System.out.println("Operation took: "  + (endTime-startTime)/1000.0 + " seconds");
    }
	
	public static void main(String[] args) {
		ParaTaskExample program = new ParaTaskExample();
		program.start();
	}
}