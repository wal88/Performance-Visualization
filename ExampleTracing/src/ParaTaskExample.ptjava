import pu.pi.ParIteratorFactory;
import java.util.concurrent.atomic.AtomicInteger;

import pt.runtime.CurrentTask;

import java.util.*;


public class ParaTaskExample {
	static int numOfArrays = 4;
	AtomicInteger working=new AtomicInteger(0);
	
	private int[] numbers;
    private int[] helper;
    private int number;

    public void sort(int[] values) {
        this.numbers = values;
        number = values.length;
        this.helper = new int[number];
        mergesort(0, number - 1);
    }

    private void mergesort(int low, int high) {
        if (low < high) {
            int middle = low + (high - low) / 2;
            mergesort(low, middle);
            mergesort(middle + 1, high);
            merge(low, middle, high);
        }
    }

    private void merge(int low, int middle, int high) {

        for (int i = low; i <= high; i++) {
            helper[i] = numbers[i];
        }

        int i = low;
        int j = middle + 1;
        int k = low;
        while (i <= middle && j <= high) {
            if (helper[i] <= helper[j]) {
                numbers[k] = helper[i];
                i++;
            } else {
                numbers[k] = helper[j];
                j++;
            }
            k++;
        }
        while (i <= middle) {
            numbers[k] = helper[i];
            k++;
            i++;
        }

    }
    
    private ArrayList<int[]> createArrays(int numOfArrays) {
    	ArrayList<int[]> intArrays = new ArrayList<int[]>();
    	
    	for (int i = 0; i< numOfArrays; i++) {
    	
    	int[] array = new int[99999999];
			for (int j=0; j< array.length; j++) {
				array[j] = (int) Math.random()*5000;
			}
		intArrays.add(array);
    	}
    	return intArrays;
    }
    
    TASK(4) public void paraTask(Iterator<int[]> it) {
		System.out.println("I am task number " + CurrentTask.relativeID());
		System.out.println("I am thread number: " + CurrentTask.currentThreadID());
    	while (it.hasNext()) {
			sort(it.next());

		}
	}
	
	public static void main(String[] args) {
		System.out.println("Hello");
		ParaTaskExample program = new ParaTaskExample();
		int numOfThreads = 4;
		
		
		ArrayList<int[]> intArrays= program.createArrays(numOfArrays);
		System.out.println(intArrays.size());
		Iterator<int[]> parIterator = ParIteratorFactory.createParIterator(intArrays, numOfThreads);
		
		long start = System.currentTimeMillis();
		program.paraTask(parIterator);
		
		long end = System.currentTimeMillis();
		System.out.println("Operation took: "  + (end-start)/1000.0 + " seconds");
	}
}