import pu.pi.ParIteratorFactory;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.atomic.AtomicInteger;

import pt.runtime.CurrentTask;
import pt.runtime.TaskID;

import java.util.*;
import java.util.ArrayList;
import utils.MergeSort;

public class ParaTaskWithDependency {
	final int NUM_OF_ARRAYS = 6;
	final int LENGTH_OF_ARRAYS = 40000000;
	ArrayList<int[]> intArrays = new ArrayList<int[]>();
	private int[] numbers;
	private int[] helper;
	private int number;

	MergeSort ms = new MergeSort(numbers, helper, number);
	
	TASK(NUM_OF_ARRAYS)	public void paraTaskCreateArrays() {
		// int range is 2,147,483,647 - -2,147,483,648 +1
		double range = 4294967296.0;
		int min = -2147483648;

//		int sizeChoice = (int) (Math.random()*4) +1;
//		int currentLengthOfArray = (int) (LENGTH_OF_ARRAYS * 0.25*sizeChoice);
		int[] array = new int[LENGTH_OF_ARRAYS];
		for (int j = 0; j < array.length; j++) {
			array[j] = (int) (Math.random() * range) + min;
		}
		intArrays.add(array);
		System.out.println("Created array " + CurrentTask.relativeID());

	}


	TASK public void paraTaskSort(int[] array) {
		System.out.println("Now sorting Array with Task ID: " + CurrentTask.globalID() /*+", array size is: "+array.length*/);
		ms.sort(array);
		System.out.println("Array with Task ID: " + CurrentTask.globalID() + " has been sorted by thread number: "
				+ CurrentTask.currentThreadID());
	}
	
	TASK public void paraTaskProcess(int[] array1, int[] array2, String dependenceMessage) {
		System.out.println("Now processing Array with Task ID: " + CurrentTask.globalID() + dependenceMessage);
		if (array2.length == 0) {
			for (int i=0; i < array1.length-1; i++)
				array1[i] = array1[i]/2 + array1[i+1]/2;
		} else {
			for (int i = 0; i<array1.length-1; i++)
				array1[i] = array1[i]/2 + array1[i+1]/2 + array2[i];
		}
		System.out.println("Array with Task ID: " + CurrentTask.globalID() + " has been processed by thread number: "
				+ CurrentTask.currentThreadID());
	}
	
	TASK public void paraTaskProcess2(int[] array1, int[] array2, int[] array3, String dependenceMessage) {
		System.out.println("Now processing Array with Task ID: " + CurrentTask.globalID() + dependenceMessage);
		for (int i = 0; i<array1.length-1; i++)
				array1[i] = array1[i]/2 + array1[i+1]/2 + array2[i] + array3[i];
		System.out.println("Array with Task ID: " + CurrentTask.globalID() + " has been processed by thread number: "
				+ CurrentTask.currentThreadID());
	}

	private void start() {
    	System.out.println("Initializing arrays in parallel..");
		TaskID<Void> arrayTasks = paraTaskCreateArrays();
		try {
			arrayTasks.waitTillFinished();
		} catch (ExecutionException e) {
			e.printStackTrace();
		} catch (InterruptedException e) {
			e.printStackTrace();
		}//Iterator<int[]> parIterator = ParIteratorFactory.createParIterator(intArrays, NUM_OF_ARRAYS);
		
		System.out.println("There are " + intArrays.size() + " arrays to be sorted and processed. Timer started.");
		
		long startTime = System.currentTimeMillis();
		String message = "";
		TaskID<Void> sortId0 = paraTaskSort(intArrays.get(0));
		TaskID<Void> sortId1 = paraTaskSort(intArrays.get(1));
		TaskID<Void> sortId2 = paraTaskSort(intArrays.get(2));
		TaskID<Void> sortId3 = paraTaskSort(intArrays.get(3));
		TaskID<Void> sortId4 = paraTaskSort(intArrays.get(4));
		TaskID<Void> sortId5 = paraTaskSort(intArrays.get(5));
		try {
			sortId0.waitTillFinished();
			//After sorting first array, start processing it 
			TaskID<Void> processId0 = paraTaskProcess(intArrays.get(0), new int[0], message);
			
			sortId1.waitTillFinished();
			message = ", this task depends on Task "+processId0.globalID()+" which has completed."; 
			TaskID<Void> processId1 = paraTaskProcess(intArrays.get(1), intArrays.get(0), message) dependsOn(processId0);
			
			sortId2.waitTillFinished();
			TaskID<Void> processId2 = paraTaskProcess(intArrays.get(2), intArrays.get(0), message) dependsOn(processId0);
			
			sortId2.waitTillFinished();
			TaskID<Void> processId3 = paraTaskProcess(intArrays.get(3), intArrays.get(0), message) dependsOn(processId0);
			
			sortId4.waitTillFinished();
			message = ", this task depends on Tasks "+processId1.globalID()+" & "+processId2.globalID()+" which have completed."; 
			TaskID<Void> processId4 = paraTaskProcess2(intArrays.get(4), intArrays.get(1), intArrays.get(2), message) dependsOn(processId1,processId2);
			
			sortId5.waitTillFinished();
			message = ", this task depends on Tasks "+processId2.globalID()+" & "+processId3.globalID()+" which have completed."; 
			TaskID<Void> processId5 = paraTaskProcess2(intArrays.get(5), intArrays.get(2), intArrays.get(3), message) dependsOn(processId2,processId3);
			
			processId0.waitTillFinished();
			processId1.waitTillFinished();
			processId2.waitTillFinished();
			processId3.waitTillFinished();
			processId4.waitTillFinished();
			processId5.waitTillFinished();
		} catch (ExecutionException e) {
			e.printStackTrace();
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
		long endTime = System.currentTimeMillis();
		System.out.println("Operations complete. Time taken: "  + (endTime-startTime)/1000.0 + " seconds");
    }

	public static void main(String[] args) {
		ParaTaskWithDependency program = new ParaTaskWithDependency();
		program.start();
	}

}